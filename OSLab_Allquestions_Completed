Lab Sheet -1



Q.1 Describe the booting sequence of Windows XP (start from the BIOS POST and finish till login screen comes)
Sol:
1.	 First is the POST, this stands for Power On Self Test, for the computer. This process tests memory as well as a number of other subsystems. You can usually monitor this as it runs each test. After that is complete the system will run POST for any device that has a BIOS (Basic Input-Output System). An AGP has its own BIOS, as do some network cards and various other devices. 
2.	Once the POST is complete and the BIOS is sure that everything is working properly, the BIOS will then attempt to read the MBR (Master Boot Record). This is the first sector of the first hard drive (called the Master or HD0). When the MBR takes over it means that Windows is now in control. 
3.	The MBR looks at the BOOT SECTOR (the first sector of the active partition). That is where NTLDR is located, NTLDR is the BOOT LOADER for Windows XP. NTLDR will allow memory addressing, initiate the file system, read the boot.ini and load the boot menu. NTLDR has to be in the root of the active partition as do NTDETECT.COM, BOOT.INI, BOOTSECT.DOS (for multi-OS booting) and NTBOOTDD.SYS (if you have SCSI adapters) 
4.	Once XP is selected from the Boot Menu, NTLDR will run NTDETECT.COM, BOOT.INI and BOOTSECT.DOS to get the proper OS selected and loaded. The system starts in 16-bit real mode and then moves into 32-bit protected mode. 
5.	NTLDR will then load NTOSKRNL.EXE and HAL.DLL. Effectively, these two files are windows XP. They must be located in %SystemRoot%System32. 
6.	NTLDR reads the registry, chooses a hardware profile and authorizes device drivers, in that exact order. 
7.	At this point NTOSKRNL.EXE takes over. It starts WINLOGON.EXE that in turn starts LSASS.EXE, this is the program that display the Logon screen so that you can logon.

Q.2  What is boot loader and Find where the boot loader in Windows and Linux is. Give some examples of boot loaders.
Sol: Boot loader is a peice of code that runs before any operating system is running. It contains several ways to boot the os kernel and also contains commands for debugging or modifying the kernel environment. It allows memory addressing,  initials the file system and loads the boot menu.
Boot loader is located in boot sector which is located in harddisk or floppy disk for windows. Eg NDTLDR
LILO and GRUB are eg for linux.

Q.3 Essential functionalities of an Operating System. (write at least 10).
Sol: 
1.	Booting the computer (process management)
2.	Resource management (task managing mouse keyboard, handles memory)
3.	Provides user interface
4.	File management- manipulate save delete data
5.	Security management- virus ,alert msg
6.	Execute and provide services for application system
7.	Consistent way to deal with hardware
8.	Conducts abstraction
9.	Used to access high memory area

Q.4 Name those softwares which implements above functionalities. 
       (like for printing we use printing softwares or drivers etc.)
Sol:  1)  AVG- antivirus file manager, MCafee
         2) printing softwares
         3 ) media player

Q.5 What are Device drivers? Have you installed any of those? If yes which ones. 
Sol: It brings data from secondary to primary memory so as to make os interact with it. Eg. Printers device drivers.Os can interact only with direct memory 

Q.6 Can we have a computer working for you without OS ?
Sol: the computer will start without os but we will not be able to interact with software or hardware.

Q.7 Name some OS that can be and are used on mobile phones.
Sol:  android, windows, symbian used for mobile phones.

Q.8 Explore Linux and write the similarities between Windows and Linux for operations not with the Looks. (at least 5).
Sol:
1.	All of these systems work in protected mode. 
2.	This means that user does not have full access to hardware. 
3.	They can run on Intel-compatible platforms.
4.	TCP/IP support, common protocols.
5.	On each platform there are some games.

Q.9 Write down 10 different electronic gadgets where OS is used. Also include the name of OS on them.
Sol: ATM machine, metro, automobile companies, manufacturing machines.


                                       Lab Sheet -2



1.	Find the number of words in 3rd line of a given file.
Sol: sed  -n 3p filename.txt | wc-c

2.	List the number of files starting with the letter A.
Sol:  ls a*  ; ls a* | wc-l

3.	List the FULL NAMEs of all the users currently logged in.
Sol:   who

4.	Save the output of the command (from problem 3) into a file.
Sol:   users >> check.txt
           cat  check.txt

5.	Append the output of any command into a file.
Sol:   cat >> check.txt

6.	Find the size of a given file.
Sol:  du  -ch  filename

7.	Find the present Directory
Sol:  pwd

8.	Write the permissions of present working directory
Sol:  chmod ls-l directory 

9.	Create a new Directory test in  pwd
      Sol:  pwd | mkdir test

10.	Write the permissions of test directory
Sol:  chmod ls-l test | cut f2,4

11.	Copy the file /etc/resolv.conf in test directory
Sol:  cp [/etc/resolv.conf] [test directory]


12.	Rename the test directory to testing
Sol:  mv [test directory] [testing]

13.	Change the permissions of directory to 775
Sol:  chmod 775 testing

14.	Delete the testing directory
Sol:  rmdir testing

15.	Change the permissions of /tmp directory to 700
Sol:  mod  700/tmp

16.	The location of kernel files in Unix File System is /boot and by looking at the kernel file, write the kernel version you are using in your system.
Sol:  uname  -t ; cat/proc/version  ; kmp  -9 kernel

17.	Find the permissions of the file sidbi
Sol:  ls –l
        Cat/boot/grub/grub./grep linux






















                                 Lab Sheet 3


1.	Solve the following questions using sed filter
a.	How would you insert a line above a particular line?
b.	How would you replace a particular word?
c.	How would you insert START above the first line and END below the last line?

 Sol:    a)  sed ‘{x;p;x}’
           b) sed ‘s/a/b/g’  {replacing a with b at all instances}



2.	Write a shell-script that accepts a numerical value N. Then display the decrementing value of N till it reaches 0.
Sol:     echo “enter numbers”
      read n
for((c=n;c>=0;c--))
do
echo “ decrement occurring.. $c”
done


3.	  Shell script to display date and calendar alongwith Good morning/Afternoon/Evening according to time.Date information should be in this order: time, day of the week, day number, year – that is like this. 13:55:00  IST Sun 9 Jun 1996.
Sol:    x=date+ %k
          if [$x –ge 4 –a $ x –le 12]
          then
          echo”good morning”
          elif [$x –ge 10 –a $ x –le 18]
          then
echo “good afternoon”
else
echo ”god evening”
fi
date + ”time : %C % A week number % V %Y”
cal


4.	Write a shell-script that tells you user name and PID.
Sol:   echo “your username :’whoami’ ”
ps oux 1 grep test 128

5.	Develop a Basic math Calculator using case statement.
Sol:    clear
sum=0
i=”y”
echo “enter 1 number”
read n1
echo “enter second num”
read n2
while($ i=”y”)
do
echo “1 addition”
echo “2 subtraction ”
echo “3 multiplication”
echo “4 division”
echo “enter your choice”
read ch
case $ch in
1)	Sum =expr $n1+n2
 echo “Sum” =$ Sum;;
2)	Sum =expr $n1-n2
 echo “Sub” =$ Sum;; 
3)	Sum =expr $n1\*n2
 echo “mul” =$ Sum;; 
4)	Sum =expr $n1/ n2
 echo “div” =$ Sum;;
 *) echo “invalid choice” 
 esac
 echo “do you want to continue”
read i
if [$i !=”y”]
then
exit
fi
done


6.	Write a shell-script that takes a login name as a command line argument and reports to you when that person logs in.
Sol: echo “enter a name” 
      read f
      if [who $f]
      then
      echo “logged in perdon $f”
     else 
     echo “not logged in”
      fi

7.	Write a shell-script that takes a command line argument and reports on whether it is a directory, a file or something else.
Sol:   echo “file name”
read f
if [-f $f ]
then
echo “file”
elif [-d $f ]
then
echo “directory”
else
echo “error”
fi








8.	Write a shell script that accepts a positive integer value from the user, say 34, and prints out all the divisors of 34 as a list.
a.	Enter a positive integer: 34
b.	The divisors of 34 are: 1, 2, 17, and 34

Sol:   echo “enter a positive number”
          read n
          echo “the divisors of $n are:”  
          for((i=1;i<=n;++i)) 
          do
          x =$((n%i))
          if($x – eq0)
          then
          echo $i
          fi
          done













                             












                                Lab sheet   4

 
1.	Write Linux C Program to create at least two foreground processes and at least two background processes. Display all the current process running on system.
Sol:  int main
{
printf (“HELLO \n”);
char back 1[]= ”cat > bgt.txt &”;
char back 2[]= “date &”;
system (“ps –e &”);
system (back 1);
system (“cal &”);
system (back 2);
char fork 1[] =”cat >new.txt”;
char fork 2[] =”date”;
system (fork 1);
system (fork 2);
return 0;
}




2.	Write Linux C Program to create at least 5 background processes and using nice command to schedule priority for these. 
Sol:   int main ()
	 {
	  system (“nice -9 date &”)
	system (“nice -1 echo ‘hello’ &”);
	system (“nice -20 cal &”);
	system (“nice -12 ls”);
	return 0;
	}





    3. Write Linux C Program to display the process attributed as follows: 
a. The process ID or PID 
b. The parent process ID or PPID 
c. Nice number 
d. Terminal or TTY 
e. User name of the real and effective user (RUID and EUID). 
Sort the output of the above into files called procatt0.txt and procatt1.txt depending on process screation time and CPU utilization time. 
    Sol:
 void main()
{
pid -t p1;
p1 =fork();
printf (“parent id =%d \n” ,(int) getpid());
printf (“child process id =%d \n” ,(int) getpid());
printf (“nice number id =%d \n” ,(int) sysytem(“nice”));
system(“ps aux /awk ‘{print $1}’ | sed ‘/d’ / sort /uniq”);


    4. Write Linux C Program to create the child process using fork command. Display the output in        following format 
before fork : 10539 ---I am the father: 10539 of child: 10540 ---I am the child: 10540 
    Sol: 
int main()
{
int pid;
pid=fork();
if (pid<0)
{
printf (“fork failed \n”);
exit(-1);
}
if (pid==0)
{
printf (“i am child =%d \n”,pid);
}
else
{
printf (“i am parent =%d \n”,pid);
exit(0);
}
return 0;}
                                                     Lab sheet 5



1.	Given the list of processes, their CPU burst times and arrival times, display/print the Gantt chart for following algorithms. For each of the scheduling policies, compute and print the average waiting time and average turnaround time
a.SJF
b. FCFS
c. Priority
d. RR



code:
#include<stdio.h>

struct templet
{
    char name[8];
    int at,st,pt,ft,tat,wt,priority,remain,flag;
}p[20],temp;

void fcfs();
void sjf();
void rr();
void prio();
int main()
{
    int ch;
    do{
    printf("\n\t1.FCFS\n\t2.SJF\n\t3.Round Robin\n\t4.Priority\n\t5.exit");
    printf("\n\tEnter choice : ");
    scanf("%d",&ch);
    switch(ch)
    {
        case 1:fcfs();
                break;
        case 2:sjf();
                break;
        case 3: rr();
                break;
        case 4: prio();
                break;
    }}while(ch!=5);
}
void fcfs()
{
    int no,i,j,fcnt=0,scnt=0;
    printf("\n\tEnter no of processes : ");
    scanf("%d",&no);
    for(i=0;i<no;i++)
    {
        printf("\n\tEnter process name : ");
        scanf("%s",p[i].name);
        printf("\n\tEnter Burst time : ");
        scanf("%d",&p[i].pt);
    }
    printf("\n\t Grant Chart : \n\t\t");
    for(i=0;i<no;i++)
    {
        p[i].st=fcnt;
        fcnt+=p[i].pt;
        p[i].wt=fcnt-p[i].pt;
        p[i].tat=fcnt;
        printf("%s -->",p[i].name);
    }
    printf("Finish");
    fcnt=0;
    printf("\n\tProcess \t burst time \t waiting time \t turn around time");
    for(i=0;i<no;i++)
    {
        printf("\n\t%s\t\t\t%d\t\t%d\t \t%d",p[i].name,p[i].pt,p[i].wt,p[i].tat);
        fcnt+=p[i].wt;
        scnt+=p[i].tat;
    }
    printf("\n\n\t\t\t\tAverage : \t %d\t   \t%d",fcnt/no,scnt/no);
}
void sjf()
{
    int no,i,j,fcnt=0,scnt=0;
    printf("\n\tEnter no of processes : ");
    scanf("%d",&no);
    for(i=0;i<no;i++)
    {
        printf("\n\tEnter process name : ");
        scanf("%s",p[i].name);
        printf("\n\t Enter Arrival time : ");
        scanf("%d",&p[i].at);
        printf("\n\tEnter Burst time : ");
        scanf("%d",&p[i].pt);
        p[i].remain=p[i].pt;
        p[i].flag=0;
    }
    for(i=0;i<no;i++)
    {
        for(j=0;j<no;j++)
        {
            if(p[i].at<p[j].at)
            {
                temp=p[i];
                p[i]=p[j];
                p[j]=temp;
            }
        }
    }
    printf("\n\t Grant Chart : \n\t\t");
    
    i=0;
    scnt=p[i].at;
    while(1)
    {
        if(p[i].flag==0)
        {
            printf("%s ",p[i].name);
            p[i].remain--;
            scnt++;
            if(p[i].remain>0)
            {
                for(j=0;j<no;j++)
                {
                    if(p[j].at<=scnt && p[j].flag==0)
                    {
                        if(p[i].remain>p[j].remain)
                        {
                            i=j;
                            printf("- ");
                        }
                    }
                }
            }
            else
            {
                p[i].wt=scnt-p[i].pt-p[i].at;
                p[i].tat=scnt-p[i].at;
                p[i].flag=1;
                fcnt++;
                printf("+");
                if(fcnt==no)
                    break;
                if(i<no-1)
                    i++;
                else
                    i=0;
                for(j=i;j>0;j--)
                        if(p[j].remain < p[i].remain && p[j].flag==0)
                            i=j;
            }
        }
        else
            i++;
    }
    
    printf("Finish");
    fcnt=0,scnt=0;
    printf("\n\tProcess \t burst time \t waiting time \t turn around time");
    for(i=0;i<no;i++)
    {
        printf("\n\t%s\t\t\t%d\t\t%d\t \t%d",p[i].name,p[i].pt,p[i].wt,p[i].tat);
        fcnt+=p[i].wt;
        scnt+=p[i].tat;
    }
    printf("\n\n\t\t\t\tAverage : \t %d\t   \t%d",fcnt/no,scnt/no);
}

void rr()
{
    int no,i,j,fcnt=0,scnt=0,interval;
    printf("\n\tEnter no of processes : ");
    scanf("%d",&no);
    for(i=0;i<no;i++)
    {
        printf("\n\tEnter process name : ");
        scanf("%s",p[i].name);
        printf("\n\tEnter Burst time : ");
        scanf("%d",&p[i].pt);
        p[i].remain=p[i].pt;
        p[i].flag=0;
    }
    printf("\n\t Enter interval  : ");
    scanf("%d",&interval);
    
    printf("\n\t Grant Chart : \n\t\t");
    
    i=0;
    while(1)
    {
        for(i=0;i<no;i++)
        {
        if(p[i].flag==0)
        {
            if(p[i].remain<=interval)
            {
                printf("-- %s (C)--",p[i].name);
                scnt+=p[i].remain;
                p[i].wt=scnt-p[i].pt;
                p[i].tat=scnt;
                p[i].flag=1;
                fcnt++;
            }
            else
            {
                printf("-- %s --",p[i].name);
                p[i].remain-=interval;
                scnt+=interval;
            }
        }
        }
        if(fcnt==no)
            break;
    }
    
    printf("Finish");
    fcnt=0,scnt=0;
    printf("\n\tProcess \t burst time \t waiting time \t turn around time");
    for(i=0;i<no;i++)
    {
        printf("\n\t%s\t\t\t%d\t\t%d\t \t%d",p[i].name,p[i].pt,p[i].wt,p[i].tat);
        fcnt+=p[i].wt;
        scnt+=p[i].tat;
    }
    printf("\n\n\t\t\t\tAverage : \t %d\t   \t%d",fcnt/no,scnt/no);
}

void prio()
{
    int no,i,j,fcnt=0,scnt=0;
    printf("\n\tEnter no of processes : ");
    scanf("%d",&no);
    for(i=0;i<no;i++)
    {
        printf("\n\tEnter process name : ");
        scanf("%s",p[i].name);
        printf("\n\tEnter Burst time : ");
        scanf("%d",&p[i].pt);
        printf("\n\tEnter priority : ");
        scanf("%d",&p[i].priority);
    }
    for(i=0;i<no;i++)
    {
        for(j=0;j<no;j++)
        {
            if(p[i].priority<p[j].priority)
            {
                temp=p[i];
                p[i]=p[j];
                p[j]=temp;
            }
        }
    }
    printf("\n\t Grant Chart : \n\t\t");
    for(i=0;i<no;i++)
    {
        p[i].st=fcnt;
        fcnt+=p[i].pt;
        p[i].wt=fcnt-p[i].pt;
        p[i].tat=fcnt;
        printf("%s -->",p[i].name);
    }
    printf("Finish");
    fcnt=0;
    printf("\n\tProcess \t burst time \t waiting time \t turn around time");
    for(i=0;i<no;i++)
    {
        printf("\n\t%s\t\t\t%d\t\t%d\t \t%d",p[i].name,p[i].pt,p[i].wt,p[i].tat);
        fcnt+=p[i].wt;
        scnt+=p[i].tat;
    }
    printf("\n\n\t\t\t\tAverage : \t %d\t   \t%d",fcnt/no,scnt/no);
}
